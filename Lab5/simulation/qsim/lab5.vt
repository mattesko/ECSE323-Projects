// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/05/2017 05:04:01"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    g27_decision_maker_FSM_schematic
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module g27_decision_maker_FSM_schematic_vlg_sample_tst(
	CLK,
	COMPUTER_HAND,
	COMPUTER_LP,
	EN_DECISION,
	PLAYER_H,
	PLAYER_LP,
	RESET,
	sampler_tx
);
input  CLK;
input [4:0] COMPUTER_HAND;
input  COMPUTER_LP;
input  EN_DECISION;
input [4:0] PLAYER_H;
input  PLAYER_LP;
input  RESET;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or COMPUTER_HAND or COMPUTER_LP or EN_DECISION or PLAYER_H or PLAYER_LP or RESET)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module g27_decision_maker_FSM_schematic_vlg_check_tst (
	COMPUTER_W,
	ENDGAME_OUT,
	PLAYER_W,
	sampler_rx
);
input [1:0] COMPUTER_W;
input  ENDGAME_OUT;
input [1:0] PLAYER_W;
input sampler_rx;

reg [1:0] COMPUTER_W_expected;
reg  ENDGAME_OUT_expected;
reg [1:0] PLAYER_W_expected;

reg [1:0] COMPUTER_W_prev;
reg  ENDGAME_OUT_prev;
reg [1:0] PLAYER_W_prev;

reg [1:0] COMPUTER_W_expected_prev;
reg  ENDGAME_OUT_expected_prev;
reg [1:0] PLAYER_W_expected_prev;

reg [1:0] last_COMPUTER_W_exp;
reg  last_ENDGAME_OUT_exp;
reg [1:0] last_PLAYER_W_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	COMPUTER_W_prev = COMPUTER_W;
	ENDGAME_OUT_prev = ENDGAME_OUT;
	PLAYER_W_prev = PLAYER_W;
end

// update expected /o prevs

always @(trigger)
begin
	COMPUTER_W_expected_prev = COMPUTER_W_expected;
	ENDGAME_OUT_expected_prev = ENDGAME_OUT_expected;
	PLAYER_W_expected_prev = PLAYER_W_expected;
end


// expected PLAYER_W[ 1 ]
initial
begin
	PLAYER_W_expected[1] = 1'bX;
end 
// expected PLAYER_W[ 0 ]
initial
begin
	PLAYER_W_expected[0] = 1'bX;
end 
// expected COMPUTER_W[ 1 ]
initial
begin
	COMPUTER_W_expected[1] = 1'bX;
end 
// expected COMPUTER_W[ 0 ]
initial
begin
	COMPUTER_W_expected[0] = 1'bX;
end 

// expected ENDGAME_OUT
initial
begin
	ENDGAME_OUT_expected = 1'bX;
end 
// generate trigger
always @(COMPUTER_W_expected or COMPUTER_W or ENDGAME_OUT_expected or ENDGAME_OUT or PLAYER_W_expected or PLAYER_W)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected COMPUTER_W = %b | expected ENDGAME_OUT = %b | expected PLAYER_W = %b | ",COMPUTER_W_expected_prev,ENDGAME_OUT_expected_prev,PLAYER_W_expected_prev);
	$display("| real COMPUTER_W = %b | real ENDGAME_OUT = %b | real PLAYER_W = %b | ",COMPUTER_W_prev,ENDGAME_OUT_prev,PLAYER_W_prev);
`endif
	if (
		( COMPUTER_W_expected_prev[0] !== 1'bx ) && ( COMPUTER_W_prev[0] !== COMPUTER_W_expected_prev[0] )
		&& ((COMPUTER_W_expected_prev[0] !== last_COMPUTER_W_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COMPUTER_W[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COMPUTER_W_expected_prev);
		$display ("     Real value = %b", COMPUTER_W_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_COMPUTER_W_exp[0] = COMPUTER_W_expected_prev[0];
	end
	if (
		( COMPUTER_W_expected_prev[1] !== 1'bx ) && ( COMPUTER_W_prev[1] !== COMPUTER_W_expected_prev[1] )
		&& ((COMPUTER_W_expected_prev[1] !== last_COMPUTER_W_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COMPUTER_W[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COMPUTER_W_expected_prev);
		$display ("     Real value = %b", COMPUTER_W_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_COMPUTER_W_exp[1] = COMPUTER_W_expected_prev[1];
	end
	if (
		( ENDGAME_OUT_expected_prev !== 1'bx ) && ( ENDGAME_OUT_prev !== ENDGAME_OUT_expected_prev )
		&& ((ENDGAME_OUT_expected_prev !== last_ENDGAME_OUT_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ENDGAME_OUT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ENDGAME_OUT_expected_prev);
		$display ("     Real value = %b", ENDGAME_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ENDGAME_OUT_exp = ENDGAME_OUT_expected_prev;
	end
	if (
		( PLAYER_W_expected_prev[0] !== 1'bx ) && ( PLAYER_W_prev[0] !== PLAYER_W_expected_prev[0] )
		&& ((PLAYER_W_expected_prev[0] !== last_PLAYER_W_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PLAYER_W[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PLAYER_W_expected_prev);
		$display ("     Real value = %b", PLAYER_W_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PLAYER_W_exp[0] = PLAYER_W_expected_prev[0];
	end
	if (
		( PLAYER_W_expected_prev[1] !== 1'bx ) && ( PLAYER_W_prev[1] !== PLAYER_W_expected_prev[1] )
		&& ((PLAYER_W_expected_prev[1] !== last_PLAYER_W_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PLAYER_W[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PLAYER_W_expected_prev);
		$display ("     Real value = %b", PLAYER_W_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PLAYER_W_exp[1] = PLAYER_W_expected_prev[1];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module g27_decision_maker_FSM_schematic_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [4:0] COMPUTER_HAND;
reg COMPUTER_LP;
reg EN_DECISION;
reg [4:0] PLAYER_H;
reg PLAYER_LP;
reg RESET;
// wires                                               
wire [1:0] COMPUTER_W;
wire ENDGAME_OUT;
wire [1:0] PLAYER_W;

wire sampler;                             

// assign statements (if any)                          
g27_decision_maker_FSM_schematic i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.COMPUTER_HAND(COMPUTER_HAND),
	.COMPUTER_LP(COMPUTER_LP),
	.COMPUTER_W(COMPUTER_W),
	.EN_DECISION(EN_DECISION),
	.ENDGAME_OUT(ENDGAME_OUT),
	.PLAYER_H(PLAYER_H),
	.PLAYER_LP(PLAYER_LP),
	.PLAYER_W(PLAYER_W),
	.RESET(RESET)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 

// RESET
initial
begin
	RESET = 1'b0;
	RESET = #240000 1'b1;
	RESET = #40000 1'b0;
end 

// EN_DECISION
always
begin
	EN_DECISION = 1'b0;
	EN_DECISION = #10000 1'b1;
	#10000;
end 
// PLAYER_H[ 4 ]
initial
begin
	PLAYER_H[4] = 1'b1;
	PLAYER_H[4] = #280000 1'b0;
	PLAYER_H[4] = #20000 1'b1;
	PLAYER_H[4] = #20000 1'b0;
	PLAYER_H[4] = #20000 1'b1;
	PLAYER_H[4] = #20000 1'b0;
	PLAYER_H[4] = #20000 1'b1;
	PLAYER_H[4] = #280000 1'b0;
end 
// PLAYER_H[ 3 ]
initial
begin
	PLAYER_H[3] = 1'b0;
	PLAYER_H[3] = #300000 1'b1;
	PLAYER_H[3] = #20000 1'b0;
	PLAYER_H[3] = #670000 1'b1;
end 
// PLAYER_H[ 2 ]
initial
begin
	PLAYER_H[2] = 1'b0;
	PLAYER_H[2] = #160000 1'b1;
	PLAYER_H[2] = #120000 1'b0;
end 
// PLAYER_H[ 1 ]
initial
begin
	PLAYER_H[1] = 1'b0;
	PLAYER_H[1] = #80000 1'b1;
	PLAYER_H[1] = #80000 1'b0;
	PLAYER_H[1] = #80000 1'b1;
	PLAYER_H[1] = #40000 1'b0;
	PLAYER_H[1] = #100000 1'b1;
	PLAYER_H[1] = #280000 1'b0;
end 
// PLAYER_H[ 0 ]
initial
begin
	repeat(3)
	begin
		PLAYER_H[0] = 1'b0;
		PLAYER_H[0] = #40000 1'b1;
		# 40000;
	end
	PLAYER_H[0] = 1'b0;
	PLAYER_H[0] = #60000 1'b1;
	PLAYER_H[0] = #20000 1'b0;
	PLAYER_H[0] = #20000 1'b1;
	PLAYER_H[0] = #20000 1'b0;
end 
// COMPUTER_HAND[ 4 ]
initial
begin
	COMPUTER_HAND[4] = 1'b1;
	COMPUTER_HAND[4] = #120000 1'b0;
	COMPUTER_HAND[4] = #80000 1'b1;
	COMPUTER_HAND[4] = #40000 1'b0;
	COMPUTER_HAND[4] = #100000 1'b1;
	COMPUTER_HAND[4] = #20000 1'b0;
	COMPUTER_HAND[4] = #20000 1'b1;
	COMPUTER_HAND[4] = #290000 1'b0;
end 
// COMPUTER_HAND[ 3 ]
initial
begin
	COMPUTER_HAND[3] = 1'b0;
end 
// COMPUTER_HAND[ 2 ]
initial
begin
	COMPUTER_HAND[2] = 1'b0;
	COMPUTER_HAND[2] = #200000 1'b1;
	COMPUTER_HAND[2] = #40000 1'b0;
	COMPUTER_HAND[2] = #100000 1'b1;
	COMPUTER_HAND[2] = #20000 1'b0;
end 
// COMPUTER_HAND[ 1 ]
initial
begin
	COMPUTER_HAND[1] = 1'b0;
	COMPUTER_HAND[1] = #340000 1'b1;
	COMPUTER_HAND[1] = #20000 1'b0;
end 
// COMPUTER_HAND[ 0 ]
initial
begin
	COMPUTER_HAND[0] = 1'b1;
	COMPUTER_HAND[0] = #120000 1'b0;
	COMPUTER_HAND[0] = #80000 1'b1;
	COMPUTER_HAND[0] = #40000 1'b0;
	COMPUTER_HAND[0] = #100000 1'b1;
	COMPUTER_HAND[0] = #20000 1'b0;
	COMPUTER_HAND[0] = #20000 1'b1;
	COMPUTER_HAND[0] = #290000 1'b0;
end 

// PLAYER_LP
initial
begin
	PLAYER_LP = 1'b1;
	PLAYER_LP = #300000 1'b0;
	PLAYER_LP = #20000 1'b1;
end 

// COMPUTER_LP
initial
begin
	COMPUTER_LP = 1'b1;
	COMPUTER_LP = #340000 1'b0;
	COMPUTER_LP = #20000 1'b1;
end 

g27_decision_maker_FSM_schematic_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.COMPUTER_HAND(COMPUTER_HAND),
	.COMPUTER_LP(COMPUTER_LP),
	.EN_DECISION(EN_DECISION),
	.PLAYER_H(PLAYER_H),
	.PLAYER_LP(PLAYER_LP),
	.RESET(RESET),
	.sampler_tx(sampler)
);

g27_decision_maker_FSM_schematic_vlg_check_tst tb_out(
	.COMPUTER_W(COMPUTER_W),
	.ENDGAME_OUT(ENDGAME_OUT),
	.PLAYER_W(PLAYER_W),
	.sampler_rx(sampler)
);
endmodule

